# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Category {
  canonicalUrl: String
  createdAt: DateTimeISO!
  description: String
  id: ID!
  indexable: Boolean
  metaDescription: String
  metaKeywords: String
  metaTitle: String
  name: String!
  posts: [Post!]
  slug: String!
  socialImageUrl: String
  updatedAt: DateTimeISO!
}

input CategoryFilterInput {
  description: TextFilterInput
  indexable: Boolean
  name: TextFilterInput
}

input CategoryInput {
  canonicalUrl: String
  description: String
  indexable: Boolean = true
  metaDescription: String
  metaKeywords: String
  metaTitle: String
  name: String!
  slug: String
  socialImageUrl: String
}

"""Campos por los que se puede ordenar las categorías"""
enum CategorySortField {
  CREATED_AT
  NAME
  UPDATED_AT
}

input CategorySortInput {
  field: CategorySortField! = NAME
  order: SortOrder! = DESC
}

input CategoryUpdateInput {
  canonicalUrl: String
  description: String
  indexable: Boolean
  metaDescription: String
  metaKeywords: String
  metaTitle: String
  name: String
  slug: String
  socialImageUrl: String
}

input DateFilterInput {
  from: DateTimeISO
  to: DateTimeISO
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LoginResponse {
  token: String!
  user: User!
}

type Mutation {
  createCategory(input: CategoryInput!): Category!
  createPost(input: PostInput!): Post!
  deleteCategory(id: String!): Boolean!
  deletePost(id: String!): Boolean!
  login(email: String!, password: String!): LoginResponse!
  register(input: UserInput!): User!
  updateCategory(id: String!, input: CategoryUpdateInput!): Category!
  updatePost(id: String!, input: PostUpdateInput!): Post!
  updateUser(id: String!, input: UserUpdateInput!): User!
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalItems: Int!
  totalPages: Int!
}

type PaginatedCategories {
  items: [Category!]!
  pageInfo: PageInfo!
}

type PaginatedPosts {
  items: [Post!]!
  pageInfo: PageInfo!
}

type PaginatedUsers {
  items: [User!]!
  pageInfo: PageInfo!
}

input PaginationInput {
  limit: Int = 10
  offset: Int = 0
}

type Post {
  author: User!
  authorId: String!
  canonicalUrl: String
  category: Category!
  categoryId: String!
  content: String!
  createdAt: DateTimeISO!
  excerpt: String!
  featuredImageUrl: String
  id: ID!
  indexable: Boolean
  metaDescription: String
  metaKeywords: String
  metaTitle: String
  publishedAt: DateTimeISO
  relatedPosts: [Post!]
  slug: String!
  socialImageUrl: String
  status: String!
  structuredData: JSON
  title: String!
  updatedAt: DateTimeISO!
}

input PostFilterInput {
  authorIds: [String!]
  categoryIds: [String!]
  content: TextFilterInput
  createdAt: DateFilterInput
  featured: Boolean
  indexable: Boolean
  publishedAt: DateFilterInput
  status: PostStatus
  title: TextFilterInput
}

input PostInput {
  authorId: String
  canonicalUrl: String
  categoryId: String
  content: String!
  excerpt: String!
  featuredImageUrl: String
  indexable: Boolean = true
  metaDescription: String
  metaKeywords: String
  metaTitle: String
  relatedPostIds: [String!]
  slug: String
  socialImageUrl: String
  status: PostStatus = DRAFT
  structuredData: JSON
  title: String!
}

"""Campos por los que se pueden ordenar los posts"""
enum PostSortField {
  CREATED_AT
  PUBLISHED_AT
  TITLE
  UPDATED_AT
}

input PostSortInput {
  field: PostSortField! = PUBLISHED_AT
  order: SortOrder! = DESC
}

"""Estados posibles de un post"""
enum PostStatus {
  ARCHIVED
  DRAFT
  PUBLISHED
}

input PostUpdateInput {
  canonicalUrl: String
  categoryId: String
  content: String
  excerpt: String
  featuredImageUrl: String
  indexable: Boolean
  metaDescription: String
  metaKeywords: String
  metaTitle: String
  publishedAt: DateTimeISO
  relatedPostIds: [String!]
  slug: String
  socialImageUrl: String
  status: PostStatus
  structuredData: JSON
  title: String
}

type Query {
  categories: [Category!]!
  category(id: String!): Category
  categoryBySlug(slug: String!): Category
  countPublishedPosts: Int!
  paginatedCategories(filter: CategoryFilterInput, pagination: PaginationInput, sort: CategorySortInput): PaginatedCategories!
  paginatedPosts(filter: PostFilterInput, pagination: PaginationInput, sort: PostSortInput): PaginatedPosts!
  paginatedUsers(filter: UserFilterInput, pagination: PaginationInput, sort: UserSortInput): PaginatedUsers!
  post(id: String!): Post
  postBySlug(slug: String!): Post
  posts: [Post!]!
  postsByCategory(categoryId: String!, pagination: PaginationInput, sort: PostSortInput): PaginatedPosts!
  publishedPosts(pagination: PaginationInput, sort: PostSortInput): [Post!]!
  searchCategories(pagination: PaginationInput, sort: CategorySortInput, term: String!): PaginatedCategories!
  searchPosts(filter: PostFilterInput, pagination: PaginationInput, sort: PostSortInput, term: String!): PaginatedPosts!
  user(id: String!): User
  users: [User!]!
}

"""Dirección de ordenamiento (ascendente o descendente)"""
enum SortOrder {
  ASC
  DESC
}

input TextFilterInput {
  contains: String
  endsWith: String
  equals: String
  startsWith: String
}

type User {
  bio: String
  createdAt: DateTimeISO!
  email: String!
  id: ID!
  name: String!
  position: String
  posts: [Post!]
  profileImageUrl: String
  role: String!
  updatedAt: DateTimeISO!
}

input UserFilterInput {
  email: TextFilterInput
  name: TextFilterInput
  roles: [UserRole!]
}

input UserInput {
  email: String!
  name: String!
  password: String!
  role: UserRole
}

"""Roles de usuario en el sistema"""
enum UserRole {
  ADMIN
  AUTHOR
  EDITOR
}

"""Campos por los que se puede ordenar los usuarios"""
enum UserSortField {
  CREATED_AT
  EMAIL
  NAME
}

input UserSortInput {
  field: UserSortField! = NAME
  order: SortOrder! = DESC
}

input UserUpdateInput {
  name: String
  password: String
  role: UserRole
}