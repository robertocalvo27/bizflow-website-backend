# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type CTA {
  backgroundColor: String
  buttonColor: String
  buttonText: String!
  createdAt: DateTimeISO!
  description: String!
  destination: String!
  id: ID!
  openInNewTab: Boolean!
  textColor: String
  title: String!
  type: String!
  updatedAt: DateTimeISO!
}

type Category {
  canonicalUrl: String
  createdAt: DateTimeISO!
  description: String
  id: ID!
  indexable: Boolean
  metaDescription: String
  metaKeywords: String
  metaTitle: String
  name: String!
  posts: [Post!]
  slug: String!
  socialImageUrl: String
  updatedAt: DateTimeISO!
}

input CategoryFilterInput {
  description: TextFilterInput
  indexable: Boolean
  name: TextFilterInput
}

input CategoryInput {
  canonicalUrl: String
  description: String
  indexable: Boolean = true
  metaDescription: String
  metaKeywords: String
  metaTitle: String
  name: String!
  slug: String
  socialImageUrl: String
}

"""Campos por los que se puede ordenar las categor√≠as"""
enum CategorySortField {
  CREATED_AT
  NAME
  UPDATED_AT
}

input CategorySortInput {
  field: CategorySortField! = NAME
  order: SortOrder! = DESC
}

input CategoryUpdateInput {
  canonicalUrl: String
  description: String
  indexable: Boolean
  metaDescription: String
  metaKeywords: String
  metaTitle: String
  name: String
  slug: String
  socialImageUrl: String
}

input DateFilterInput {
  from: DateTimeISO
  to: DateTimeISO
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LoginResponse {
  token: String!
  user: User!
}

type Mutation {
  addPostToVideo(postId: String!, videoId: String!): Video!
  assignCTAToPost(ctaId: String!, postId: String!): Post!
  createCTA(backgroundColor: String, buttonColor: String, buttonText: String!, description: String!, destination: String!, openInNewTab: Boolean = false, textColor: String, title: String!, type: String!): CTA!
  createCategory(input: CategoryInput!): Category!
  createPost(input: PostInput!): Post!
  createResource(input: ResourceInput!): Resource!
  createVideo(categoryId: String!, description: String, duration: Float, featured: Boolean! = false, postIds: [String!], provider: String!, thumbnailUrl: String!, title: String!, transcription: String, videoId: String!, videoUrl: String!): Video!
  deleteCTA(id: String!): Boolean!
  deleteCategory(id: String!): Boolean!
  deletePost(id: String!): Boolean!
  deleteResource(id: String!): Boolean!
  deleteVideo(id: String!): Boolean!
  incrementDownloadCount(id: String!): Resource!
  login(email: String!, password: String!): LoginResponse!
  register(input: UserInput!): User!
  removeCTAFromPost(postId: String!): Post!
  removePostFromVideo(postId: String!, videoId: String!): Video!
  updateCTA(backgroundColor: String, buttonColor: String, buttonText: String, description: String, destination: String, id: String!, openInNewTab: Boolean, textColor: String, title: String, type: String): CTA!
  updateCategory(id: String!, input: CategoryUpdateInput!): Category!
  updatePost(id: String!, input: PostUpdateInput!): Post!
  updateResource(id: String!, input: ResourceUpdateInput!): Resource!
  updateUser(id: String!, input: UserUpdateInput!): User!
  updateVideo(categoryId: String, description: String, duration: Float, featured: Boolean, id: String!, postIds: [String!], provider: String, thumbnailUrl: String, title: String, transcription: String, videoId: String, videoUrl: String): Video!
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalItems: Int!
  totalPages: Int!
}

type PaginatedCTAResponse {
  hasMore: Boolean!
  items: [CTA!]!
  totalCount: Float!
}

type PaginatedCategories {
  items: [Category!]!
  pageInfo: PageInfo!
}

type PaginatedPosts {
  items: [Post!]!
  pageInfo: PageInfo!
}

type PaginatedResources {
  items: [Resource!]!
  pageInfo: PageInfo!
}

type PaginatedUsers {
  items: [User!]!
  pageInfo: PageInfo!
}

type PaginatedVideos {
  items: [Video!]!
  meta: PaginationMeta!
}

input PaginationInput {
  limit: Int = 10
  offset: Int = 0
}

type PaginationMeta {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  itemsPerPage: Int!
  totalItems: Int!
  totalPages: Int!
}

type Post {
  author: User!
  authorId: String!
  canonicalUrl: String
  category: Category!
  categoryId: String!
  content: String!
  createdAt: DateTimeISO!
  cta: CTA
  ctaId: String
  excerpt: String!
  featuredImageUrl: String
  id: ID!
  indexable: Boolean
  metaDescription: String
  metaKeywords: String
  metaTitle: String
  metadata: String
  publishedAt: DateTimeISO
  relatedPosts: [Post!]
  slug: String!
  socialImageUrl: String
  status: String!
  structuredData: JSON
  title: String!
  updatedAt: DateTimeISO!
  videos: [Video!]
}

input PostFilterInput {
  authorIds: [String!]
  categoryIds: [String!]
  content: TextFilterInput
  createdAt: DateFilterInput
  featured: Boolean
  indexable: Boolean
  publishedAt: DateFilterInput
  status: PostStatus
  title: TextFilterInput
}

input PostInput {
  authorId: String
  canonicalUrl: String
  categoryId: String
  content: String!
  excerpt: String!
  featuredImageUrl: String
  indexable: Boolean = true
  metaDescription: String
  metaKeywords: String
  metaTitle: String
  relatedPostIds: [String!]
  slug: String
  socialImageUrl: String
  status: PostStatus = DRAFT
  structuredData: JSON
  title: String!
}

"""Campos por los que se pueden ordenar los posts"""
enum PostSortField {
  CREATED_AT
  PUBLISHED_AT
  TITLE
  UPDATED_AT
}

input PostSortInput {
  field: PostSortField! = PUBLISHED_AT
  order: SortOrder! = DESC
}

"""Estados posibles de un post"""
enum PostStatus {
  ARCHIVED
  DRAFT
  PUBLISHED
}

input PostUpdateInput {
  canonicalUrl: String
  categoryId: String
  content: String
  excerpt: String
  featuredImageUrl: String
  indexable: Boolean
  metaDescription: String
  metaKeywords: String
  metaTitle: String
  publishedAt: DateTimeISO
  relatedPostIds: [String!]
  slug: String
  socialImageUrl: String
  status: PostStatus
  structuredData: JSON
  title: String
}

type Query {
  categories: [Category!]!
  category(id: String!): Category
  categoryBySlug(slug: String!): Category
  countPublishedPosts: Int!
  featuredResources: [Resource!]!
  featuredVideos: [Video!]!
  getCTA(id: String!): CTA
  getCTAs(skip: Int! = 0, take: Int! = 10): PaginatedCTAResponse!
  paginatedCategories(filter: CategoryFilterInput, pagination: PaginationInput, sort: CategorySortInput): PaginatedCategories!
  paginatedPosts(filter: PostFilterInput, pagination: PaginationInput, sort: PostSortInput): PaginatedPosts!
  paginatedResources(filter: ResourceFilterInput, pagination: PaginationInput, sort: ResourceSortInput): PaginatedResources!
  paginatedUsers(filter: UserFilterInput, pagination: PaginationInput, sort: UserSortInput): PaginatedUsers!
  paginatedVideos(limit: Int! = 10, page: Int! = 1): PaginatedVideos!
  post(id: String!): Post
  postBySlug(slug: String!): Post
  posts: [Post!]!
  postsByCategory(categoryId: String!, pagination: PaginationInput, sort: PostSortInput): PaginatedPosts!
  publicResources(filter: ResourceFilterInput, pagination: PaginationInput, sort: ResourceSortInput): [Resource!]!
  publishedPosts(pagination: PaginationInput, sort: PostSortInput): [Post!]!
  resource(id: String!): Resource
  resourceBySlug(slug: String!): Resource
  resources: [Resource!]!
  resourcesByCategory(categoryId: String!, pagination: PaginationInput, sort: ResourceSortInput): [Resource!]!
  searchCategories(pagination: PaginationInput, sort: CategorySortInput, term: String!): PaginatedCategories!
  searchPosts(filter: PostFilterInput, pagination: PaginationInput, sort: PostSortInput, term: String!): PaginatedPosts!
  user(id: String!): User
  users: [User!]!
  video(id: String!): Video
  videoBySlug(slug: String!): Video
  videos: [Video!]!
  videosByCategory(categoryId: String!, limit: Int! = 10, page: Int! = 1): PaginatedVideos!
  videosByPost(page: Int! = 1, perPage: Int! = 10, postId: String!): PaginatedVideos!
}

type Resource {
  category: Category!
  categoryId: String!
  createdAt: DateTimeISO!
  description: String!
  downloadCount: Float!
  downloadInstructions: String
  featured: Boolean!
  fileSize: Float!
  fileUrl: String!
  id: ID!
  isPublic: Boolean!
  metadata: JSON
  resourceType: String!
  slug: String!
  thumbnailUrl: String
  title: String!
  updatedAt: DateTimeISO!
  uploader: User!
  uploaderId: String!
}

input ResourceFilterInput {
  categoryIds: [String!]
  description: TextFilterInput
  featured: Boolean
  isPublic: Boolean
  resourceTypes: [ResourceType!]
  title: TextFilterInput
  uploaderIds: [String!]
}

input ResourceInput {
  categoryId: String!
  description: String!
  downloadInstructions: String
  featured: Boolean = false
  fileSize: Float!
  fileUrl: String!
  isPublic: Boolean = true
  metadata: JSON
  resourceType: ResourceType!
  slug: String
  thumbnailUrl: String
  title: String!
  uploaderId: String
}

"""Campos por los que se pueden ordenar los recursos"""
enum ResourceSortField {
  CREATED_AT
  DOWNLOAD_COUNT
  FILE_SIZE
  TITLE
  UPDATED_AT
}

input ResourceSortInput {
  field: ResourceSortField! = CREATED_AT
  order: SortOrder! = DESC
}

"""Tipos de recursos disponibles"""
enum ResourceType {
  DOC
  IMAGE
  OTHER
  PDF
  XLSX
  ZIP
}

input ResourceUpdateInput {
  categoryId: String
  description: String
  downloadInstructions: String
  featured: Boolean
  fileSize: Float
  fileUrl: String
  isPublic: Boolean
  metadata: JSON
  resourceType: ResourceType
  slug: String
  thumbnailUrl: String
  title: String
}

"""Direcci√≥n de ordenamiento (ascendente o descendente)"""
enum SortOrder {
  ASC
  DESC
}

input TextFilterInput {
  contains: String
  endsWith: String
  equals: String
  startsWith: String
}

type User {
  bio: String
  createdAt: DateTimeISO!
  email: String!
  id: ID!
  name: String!
  position: String
  posts: [Post!]
  profileImageUrl: String
  role: String!
  updatedAt: DateTimeISO!
}

input UserFilterInput {
  email: TextFilterInput
  name: TextFilterInput
  roles: [UserRole!]
}

input UserInput {
  email: String!
  name: String!
  password: String!
  role: UserRole
}

"""Roles de usuario en el sistema"""
enum UserRole {
  ADMIN
  AUTHOR
  EDITOR
}

"""Campos por los que se puede ordenar los usuarios"""
enum UserSortField {
  CREATED_AT
  EMAIL
  NAME
}

input UserSortInput {
  field: UserSortField! = NAME
  order: SortOrder! = DESC
}

input UserUpdateInput {
  name: String
  password: String
  role: UserRole
}

type Video {
  author: User!
  authorId: String!
  category: Category!
  categoryId: String!
  createdAt: DateTimeISO!
  description: String
  duration: Float!
  featured: Boolean!
  id: ID!
  metadata: JSON
  posts: [Post!]
  provider: String!
  slug: String!
  thumbnailUrl: String!
  title: String!
  transcription: String
  updatedAt: DateTimeISO!
  videoId: String!
  videoUrl: String!
}